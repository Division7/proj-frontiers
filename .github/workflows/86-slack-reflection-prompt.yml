name: "86-slack-reflection-prompt.yml"

# This workflow uses the same setup as workflow 82:
# <https://ucsb-cs156.github.io/topics/github_actions/workflow_82.html>

on:
  schedule:
    # During Daylight Saving Time (Mar–Nov), Pacific is UTC-7
    - cron: "0 16 * * 4"  # 9 AM PDT

    # During Standard Time (Nov–Mar), Pacific is UTC-8
    # - cron: "0 17 * * 4"  # 9 AM PST

  workflow_dispatch:  # Allows manual triggering

env:
  PAT: ${{ secrets.PAT }}
  TEAM_TO_CHANNEL: ${{vars.TEAM_TO_CHANNEL}}
  ORG_NAME: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  # The columns in the Kanban board that we are interested in
  START_DATE: "2025-05-10"
  END_DATE: "2025-06-06"  # Set the end date for the workflow

jobs:

  # This job checks if the current date is before the END_DATE
  check_date:
    name: Check Date
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.check_date.outputs.continue }}
    steps:
      - name: Check if current date is before END_DATE
        id: check_date
        run: |
          current_date=$(date +%Y-%m-%d)
          end_date="${{ env.END_DATE }}"
          start_date="${{ env.START_DATE }}"
          
          if [[ "$current_date" > "$end_date" ]]; then
            echo "Current date is after $end_date. Stopping workflow."
            echo "continue=false" >> "$GITHUB_OUTPUT"
          else
            echo "Current date is before $end_date. Continuing workflow."
            echo "continue=true" >> "$GITHUB_OUTPUT"
          fi
          if [[ "$current_date" < "$start_date" ]]; then
            echo "Current date is before $start_date. Stopping workflow."
            echo "continue=false" >> "$GITHUB_OUTPUT"
          fi
          
          OWNER=${{ github.repository_owner }}
          OWNER_PLUS_REPOSITORY=${{github.repository}}
          REPOSITORY=${OWNER_PLUS_REPOSITORY/$OWNER\//}  
          if [[ "$OWNER" == "ucsb-cs156" ]]; then
            echo "This workflow should not run on repos in the ucsb-cs156 organization"
            echo "continue=false" >> "$GITHUB_OUTPUT"
          fi
          if [[ "$REPOSITORY" == STARTER* ]]; then
            echo "This workflow should not run on STARTER repos"
            echo "continue=false" >> "$GITHUB_OUTPUT"
          fi
          if [[ -f "$GITHUB_OUTPUT" ]]; then
            echo "Contents of $GITHUB_OUTPUT:"
            cat "$GITHUB_OUTPUT"
          fi
        
  # This job extracts the team name from the repository name
  # The team name is used to find the project ID for the team
  # It does this by extracting the last 6 characters of the repository name
  # Then sets the team name as an output for the next job
  get_team_name:
    name: Get Team Name and Repository Name
    runs-on: ubuntu-latest
    needs: check_date
    if: needs.check_date.outputs.continue == 'true'
    outputs:
      team: ${{ steps.find_team.outputs.team }}
      repository: ${{ steps.find_team.outputs.repository }}
    steps:
      - name: Extract Team Name from Repo
        id: find_team
        run: |
          REPO=${{ github.repository }}
          TEAM_NAME="${REPO: -6}"

          OWNER_PLUS_REPOSITORY=${{github.repository}}
          OWNER=${{ github.repository_owner }}
          REPOSITORY=${OWNER_PLUS_REPOSITORY/$OWNER\//}  

          echo "repository=${REPOSITORY}" >> "$GITHUB_OUTPUT"
          echo "team=${TEAM_NAME}" >> "$GITHUB_OUTPUT"
          

  send-to-slack:
    name: Send Report to Slack
    runs-on: ubuntu-latest
    needs: [get_team_name, check_date]
    if: needs.check_date.outputs.continue == 'true'
    steps:
      #This step is used to debug the environment variables and Slack text
      # Use a Python script to fetch repositories
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Debug Environment Variables
        run: |
          echo "TEAM_TO_CHANNEL: ${{ env.TEAM_TO_CHANNEL }}"
          echo "ORG_NAME: ${{ env.ORG_NAME }}"
          echo "Slack Channel: ${{ fromJSON(env.TEAM_TO_CHANNEL)[needs.get_team_name.outputs.team] }}"
   
      - name: Send message to Slack using Python
        id: send_message
        run: |
          python <<EOF
          import requests
          import json

          SLACK_TOKEN = "${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}"
          SLACK_CHANNEL ="${{ fromJSON(env.TEAM_TO_CHANNEL)[needs.get_team_name.outputs.team] }}"

          print(f"SLACK_CHANNEL: {SLACK_CHANNEL}")

          headers = {
              "Content-Type": "application/json",
              "Authorization": f"Bearer {SLACK_TOKEN}"
          }

          message_blocks = [
              {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "*Weekly Reflection Prompt*",
                  }
              },
              {
                  "type": "divider"
              },
              {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Hey team! It's time for our weekly reflection on contributions and team dynamics. Consider the following things:"
                  }
              },
               {
                  "type": "rich_text_list",
                  "style": "bullet",
                  "indent": 0,
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "list item one"
                        }
                      ]
                    },
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "list item two"
                        }
                      ]
                    },
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "list item three"
                        }
                      ]
                    },
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "list item four"
                        }
                      ]
                    }
                  ]
                },
              {
                  "type": "divider"
              {
                  "type": "context",
                  "elements": [
                      {
                          "type": "mrkdwn",
                          "text": "More info: <https://ucsb-cs156.github.io/s25/info/reflection.html>"
                      }
                  ]
              }
          ]

          payload = {
              "channel": SLACK_CHANNEL,
              "blocks": message_blocks,
              "text": "Weekly Reflection Prompt"
          }

          response = requests.post(
              "https://slack.com/api/chat.postMessage",
              headers=headers,
              data=json.dumps(payload)
          )

          print(response.json())
          if not response.ok:
              raise Exception(f"Error sending message: {response.text}")
          if response.status_code != 200:
              raise Exception(f"Error sending message: {response.status_code} - {response.text}")
          print("Message sent successfully!")
          EOF



